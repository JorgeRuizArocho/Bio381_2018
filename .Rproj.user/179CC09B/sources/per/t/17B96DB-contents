---
title: "Homework10"
author: "Jorge Ruiz Arocho"
date: "2018 M03 28"
output: html_document
---

```{r} 
#############################################################################
# FUNCTION: FFileBuilder
# create a set of random files for regression
# input: fileN = number of files to create
#      : fileFolder = name of folder for random files
#      : fileSize = c(min,max) number of rows in file
#      : fileNA = number on average of NA per column 
# output: set of random files 
#----------------------------------------------------------------------------
FileBuilder <- function(fileN=10,
                        fileFolder="RandomFiles/",
                        fileSize=c(15,100),
                        fileNA=3){
  for (i in seq_len(fileN)) {
    fileLength <- sample(fileSize[1]:fileSize[2],size=1) # get number of rows
    varX <- runif(fileLength) # create random x
    varY <- runif(fileLength) # create randon y
    dF <- data.frame(varX,varY) # bind into a data frame
    badVals <- rpois(n=1,lambda=fileNA) # determine NA number
    dF[sample(nrow(dF),size=badVals),1] <- NA # random NA in varX
    dF[sample(nrow(dF),size=badVals),2] <- NA # random NA in varY
    
    # create a consecutive file name for this data frame
    fileLabel <- paste(fileFolder,
                       "ranFile",
                       formatC(i,
                               width=3,
                               format="d",
                               flag="0"),
                       ".csv",sep="")
    # set up data file and incorporate time stamp 
    # and minimal metadata 
    
    write.table(cat("# Simulated random data file for batch processing","\n",
                    "# timestamp: ",as.character(Sys.time()),"\n",
                    "# JRA","\n",
                    "# ------------------------", "\n",
                    "\n",
                    file=fileLabel,
                    row.names="",
                    col.names="",
                    sep=""))

      # add the data frame now
    write.table(x=dF,
                file=fileLabel,
                sep=",",
                row.names=FALSE,
                append=TRUE)
    
    
}
} # close the function
```

```{r}
#############################################################################
# FUNCTION: regStats

# fit linear model, get regression stats 
# input: 2-column data frame
# output: slope, p-value and r2
#----------------------------------------------------------------------------
regStats <- function(d=NULL) {
  if(is.null(d)) {
    xVar <- runif(10)
    yVar <- runif(10)
    d <- data.frame(xVar,yVar)
  }
  . <- lm(data=d,d[,2]~d[,1])
  . <- summary(.)
  statsList <- list(Slope=.$coefficients[2,1],
                    pVal=.$coefficients[2,4],
                    r2=.$r.squared)
  return(statsList)
  
}

# ----------------------------------------------
library(TeachingDemos)
char2seed("Freezing March")

# -----------------------------------------------
# Global variables
fileFolder <- "RandomFiles/"
nFiles <- 100
fileOut <- "StatsSummary.csv"

# Create 100 random data
FileBuilder(fileN=nFiles)
```

```{r}
fileNames <- list.files(path=fileFolder)

# Ceate data frame to hold file summary statistics
ID <- seq_along(fileNames)
fileName <- fileNames                
slope <- rep(NA,nFiles)
pVal <- rep(NA,nFiles)
r2 <- rep(NA,nFiles)

statsOut <- data.frame(ID,fileName,slope,pVal,r2)

# batch process by looping through individual files
for (i in seq_along(fileNames)) {
  data <- read.table(file=paste(fileFolder,fileNames[i],sep=""),
                     sep=",",
                     header=TRUE) # read in next data file
  
  dClean <- data[complete.cases(data),] # get clean cases
  
  . <- regStats(dClean) # pull regression stats from clean file
  statsOut[i,3:5] <- unlist(.) # unlist, copy into last 3 columns
  
}

# set up output file and incorporate time stamp and minimal metadata 

write.table(cat("# Summary stats for ",
                "batch processing of regression models","\n",
                "# timestamp: ",as.character(Sys.time()),"\n",
                "# JRA","\n",
                "# ------------------------", "\n",
                "\n",
                file=fileOut,
                row.names="",
                col.names="",
                sep=""))

# now add the data frame

write.table(x=statsOut,
            file=fileOut,
            row.names=FALSE,
            col.names=TRUE,
            sep=",",
            append=TRUE)
```


## Breaking the program 

#### To "break" the program I increased gradually the number of NA in the fileNA function from 3 to 10.  

#### We can observe that with a high amount of NA, multiple errors pop-up and at the end we just en up with 56 ranFile.csv in our working directory instead of 100 .csv files. Also, RMarkdown doesn't allow me to knit to html with those errors. 

